/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MPPannel.java
 *
 * Created on 30-dic-2009, 17.37.49
 */

package GUI;
import db.mySQL.MySQLDataBase;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
/**
 *
 * @author Luca
 * Classe per la gestione dei MP
 */
public class MPPannel extends javax.swing.JPanel {

    /** Creates new form MPPannel */
    public MPPannel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        RoboAdminDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("RoboAdminDBPU").createEntityManager();
        mpQuery = java.beans.Beans.isDesignTime() ? null : RoboAdminDBPUEntityManager.createQuery("SELECT m FROM Mp m");
        mpList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(mpQuery.getResultList());
        jSplitPaneMp = new javax.swing.JSplitPane();
        jPanelSx = new javax.swing.JPanel();
        jButtonNew = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();
        jLabelId = new javax.swing.JLabel();
        jLabelNome = new javax.swing.JLabel();
        jLabelIntegrità = new javax.swing.JLabel();
        jLabelRiservatezza = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldNome = new javax.swing.JTextField();
        jTextFieldIntegrità = new javax.swing.JTextField();
        jTextFieldRiservatezza = new javax.swing.JTextField();
        jButtonConfig = new javax.swing.JButton();
        jPanelDx = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMP = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jSplitPaneMp.setDividerLocation(250);

        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jLabelId.setText("Id");

        jLabelNome.setText("Nome");

        jLabelIntegrità.setText("Integrità");

        jLabelRiservatezza.setText("Riservatezza");

        jButtonConfig.setText("Configura");
        jButtonConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSxLayout = new javax.swing.GroupLayout(jPanelSx);
        jPanelSx.setLayout(jPanelSxLayout);
        jPanelSxLayout.setHorizontalGroup(
            jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSxLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSxLayout.createSequentialGroup()
                        .addComponent(jButtonConfig)
                        .addContainerGap())
                    .addGroup(jPanelSxLayout.createSequentialGroup()
                        .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonSubmit)
                            .addComponent(jLabelRiservatezza, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(jLabelIntegrità)
                            .addComponent(jLabelNome, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelId))
                        .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelSxLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonNew))
                            .addGroup(jPanelSxLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldRiservatezza, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldId)
                                    .addComponent(jTextFieldIntegrità)
                                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))))
                        .addContainerGap(35, Short.MAX_VALUE))))
        );
        jPanelSxLayout.setVerticalGroup(
            jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSxLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIntegrità)
                    .addComponent(jTextFieldIntegrità, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRiservatezza)
                    .addComponent(jTextFieldRiservatezza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addComponent(jButtonConfig)
                .addGap(28, 28, 28)
                .addGroup(jPanelSxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmit)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonNew))
                .addGap(21, 21, 21))
        );

        jSplitPaneMp.setLeftComponent(jPanelSx);

        jPanelDx.setLayout(new java.awt.BorderLayout());

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mpList, jTableMP);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${integrità}"));
        columnBinding.setColumnName("Integrità");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${riservatezza}"));
        columnBinding.setColumnName("Riservatezza");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableMP);
        jTableMP.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column=e.getColumn();
                ModificaDati(row,column);
            }
        });

        jPanelDx.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPaneMp.setRightComponent(jPanelDx);

        add(jSplitPaneMp, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        // TODO add your handling code here:
        String NIds=jTextFieldId.getText();
        String NNome=jTextFieldNome.getText();
        String NIntegrità=jTextFieldIntegrità.getText();
        String NRiservatezza=jTextFieldRiservatezza.getText();
        int NId=Integer.parseInt(NIds);
        RendiPersistenteMP(NId,NNome,NIntegrità.charAt(0),NRiservatezza.charAt(0));
        MpListOld.add(new Mp (NId, NNome, NIntegrità.charAt(0), NRiservatezza.charAt(0)));
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
       //l'unico campo fondamentale per la chiamata con campi è l'id gli altri possono essere null
        String ids=jTextFieldId.getText();
        String nome=jTextFieldNome.getText();
        String integrità=jTextFieldIntegrità.getText();
        String riservatezza=jTextFieldRiservatezza.getText();
        int id;
        try {
            id=Integer.parseInt(ids);
            RimuoviRigaMP(id,nome,integrità.charAt(0),riservatezza.charAt(0));
        }
        catch (NumberFormatException e)
        {
            int row=jTableMP.getSelectedRow();
            if (row!=-1){
                RimuoviRigaMP(row);
            }
            else{
                new ErrorForm("tupla non trovata").setVisible(true);
            }
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        Object [] dirtyRow=ModifiedRow.toArray();
        ModifiedRow.clear();
        for (int i=0; i<dirtyRow.length; i++){
            int row=Integer.parseInt(dirtyRow[i].toString());
            Object []Temp=new Object[jTableMP.getColumnCount()];
            for (int j=0;j<jTableMP.getColumnCount();j++){
              Temp[j]=jTableMP.getValueAt(row, j);
            }
            String nome=Temp[1].toString();
            String integrità=Temp[2].toString();
            String riservatezza=Temp[3].toString();
            int id=-1;
            try {
                Mp oldMp=MpListOld.get(row);
                int oldid=oldMp.getId();
                id=Integer.parseInt(Temp[0].toString());
                RendiPersistenteModifica(oldid,id,nome,integrità.charAt(0),riservatezza.charAt(0));
            }
            catch(NumberFormatException e){
                new ErrorForm(e.toString());
            }
        }
        MpListOld.clear();
        CopiaListaMP(MpListOld, mpList);
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfigActionPerformed
        // TODO add your handling code here:
        int row=jTableMP.getSelectedRow();
        String mp=(String) jTableMP.getValueAt(row, 1);
        if (mp.equals("irc")){
            new IRCProperty().setVisible(true);
        }
        if (mp.equals("oscar")){
            new OscarProperty().setVisible(true);
        }
        if (mp.equals("msnp")){
            new MSNPProperty().setVisible(true);
        }
        if (mp.equals("skype")){
            new SkypeProperty().setVisible(true);
        }
        if (mp.equals("xmpp")){
            new XMPPProperty().setVisible(true);
        }
        if(mp.equals("yahoo")){
            new YahooProperty().setVisible(true);
        }
    }//GEN-LAST:event_jButtonConfigActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager RoboAdminDBPUEntityManager;
    private javax.swing.JButton jButtonConfig;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelIntegrità;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelRiservatezza;
    private javax.swing.JPanel jPanelDx;
    private javax.swing.JPanel jPanelSx;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPaneMp;
    private javax.swing.JTable jTableMP;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldIntegrità;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldRiservatezza;
    private java.util.List<GUI.Mp> mpList;
    private javax.persistence.Query mpQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //Vartiabili di supporto per la gestione
    private Vector ModifiedRow=new Vector();
    private java.util.List<GUI.Mp> MpListOld;
    private MySQLDataBase db=null;


    //=========================================METODI PRIVATI DI INIZIALIZZAZIONE

    protected void inizializza(MySQLDataBase dataBase){
        MpListOld=new ArrayList<Mp>();
        CopiaListaMP(MpListOld, mpList);
        //prepara il db log su file per ora
        db=dataBase;
    }

    //=========================================METODI PRIVATI PER LA GESTIONE DELLA TABELLA

   /**
    * Tiene traccia delle celle interesate da una modifica
    *
    * @param row riga
    * @param column colonna
    * @return void
    */
    private void ModificaDati(int row ,int column){
        //Invocato a ogni modifica della tabella
        //se la colonna modificata è -1 vuol dire che si sta aggiungendo togliendo una riga
        if (column!=-1){
            if (!ModifiedRow.contains(row))
            ModifiedRow.add(row);
        }
    }

     /**
    * Crea un lista con i dati della tabella di supporto al di andare a operare sulla giusta tubla anche se questa è stata modificata
    *
    * @param List<Mp> vecchi
    * @param List<Mp> nuovi
    * @return void
    */
    private void CopiaListaMP(List<Mp> MpOld,List<Mp> MpNew){
         for (int i=0;i<MpNew.size();i++){
            MpOld.add(new Mp(MpNew.get(i).getId(),MpNew.get(i).getNome(),MpNew.get(i).getIntegrità(),MpNew.get(i).getRiservatezza()));
        }
    }




   /**
    * Rende un nuovo utente persistente nel DB
    *
    * @param id intero con l'id da assegnare al nuovo MP
    * @param nome stringa contenente il nome del MP
    * @param integrità char contenente l'integrità del nuovo MP
    * @param riservatezza char contenente l'integrità del nuovo MP
    * @return void
    */
    private void RendiPersistenteMP(int id, String nome, char integrità, char riservatezza){
        //prepara la query da mandare al db
	String query ="INSERT INTO MP (Id, nome, integrità, riservatezza) VALUES ('" + id + "','"+ nome +"','"+ integrità +"','"+ riservatezza +"')";
        //esegue spedisce la query
        db.executeSqlUpdate(query);
        //AGGIUNGE LA RIGA DIRETTAMENTE ANCHE SULLA TABELLA
        Mp newMP=new Mp (id,nome,integrità,riservatezza);
        mpList.add(newMP);
        jTableMP.repaint();
    }


     /**
    * Rimuove una tupla selezionata in base all'id inserito nel campo id dalla tabella e dal DB
    *
    * @param id intero con l'id da assegnare al nuovo MP
    * @param nome stringa contenente il nome del MP
    * @param integrità char contenente l'integrità del nuovo MP
    * @param riservatezza char contenente l'integrità del nuovo MP
    * @return void
    */
    private void RimuoviRigaMP(int id, String nome, char integrità, char riservatezza) {
        //preparo la query di rimozione
	String query = "DELETE FROM MP WHERE Id= '" + id +"' ";
	//eseguo la query
        db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
         Mp RMP=new Mp (id,nome,integrità,riservatezza);
        mpList.remove(RMP);
        jTableMP.repaint();
    }
    /**
    * Rimuove una tupla selezionata nella tabella dal DB
    * @return void
    */
    private void RimuoviRigaMP(int row){
        Object id= jTableMP.getValueAt(row, 0);
	//preparo la query
        String query = "DELETE FROM MP WHERE Id= '" + id +"' ";
	//eseguo la query
	db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        mpList.remove(row);
        jTableMP.repaint();
    }


     /**
    * Rende le modifiche apportate alle tuple sulla tabella persistenti sul DB, la ricerca della tupla da modificare è svolta sull'id utente in particolare in base
    * all'oldId
    * @param oldId intero con l'id del MP da modificare preso prima di un eventuale modifica
    * @param id intero con l'id da assegnare al nuovo MP
    * @param nome stringa contenente il nome del MP
    * @param integrità char contenente l'integrità del nuovo MP
    * @param riservatezza char contenente l'integrità del nuovo MP
    * @return void
    */
    private void RendiPersistenteModifica(int oldid, int id, String nome, char integrità, char riservatezza) {
        String query = "UPDATE MP SET Id= '" + id +"', Nome= '"+ nome +"', integrità= '"+ integrità +"', riservatezza= '"+ riservatezza +"' WHERE Id='"+ oldid +"' ";
        //eseguo la query
        db.executeSqlUpdate(query);

    }
}
