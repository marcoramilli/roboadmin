/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccesPannel.java
 *
 * Created on 30-dic-2009, 17.36.15
 */

package GUI;


import db.mySQL.MySQLDataBase;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
/**
 *
 * @author Luca
 * Classe per la gestione di Accept table
 */
public class AcceptPannel extends javax.swing.JPanel {

    /** Creates new form AccesPannel */
    public AcceptPannel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        RoboAdminDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("RoboAdminDBPU").createEntityManager();
        acceptQuery = java.beans.Beans.isDesignTime() ? null : RoboAdminDBPUEntityManager.createQuery("SELECT a FROM Accept a");
        acceptList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(acceptQuery.getResultList());
        jSplitPaneAccept = new javax.swing.JSplitPane();
        jPanelAcceptsx = new javax.swing.JPanel();
        jLabelUserName = new javax.swing.JLabel();
        jLabelProtocol = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldProtocol = new javax.swing.JTextField();
        jButtonNew = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();
        jPanelAcceptdx = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAccept = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jSplitPaneAccept.setDividerLocation(250);

        jLabelUserName.setText("User Name:");

        jLabelProtocol.setText("Protocol:");

        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAcceptsxLayout = new javax.swing.GroupLayout(jPanelAcceptsx);
        jPanelAcceptsx.setLayout(jPanelAcceptsxLayout);
        jPanelAcceptsxLayout.setHorizontalGroup(
            jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcceptsxLayout.createSequentialGroup()
                .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcceptsxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldProtocol)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)))
                    .addGroup(jPanelAcceptsxLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButtonSubmit)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jButtonNew)))
                .addContainerGap())
        );
        jPanelAcceptsxLayout.setVerticalGroup(
            jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcceptsxLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 267, Short.MAX_VALUE)
                .addGroup(jPanelAcceptsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmit)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonNew))
                .addGap(19, 19, 19))
        );

        jSplitPaneAccept.setLeftComponent(jPanelAcceptsx);

        jPanelAcceptdx.setLayout(new java.awt.BorderLayout());

        jTableAccept.setAutoCreateRowSorter(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, acceptList, jTableAccept);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${acceptPK.username}"));
        columnBinding.setColumnName("Username");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${acceptPK.protocol}"));
        columnBinding.setColumnName("Protocol");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableAccept);
        jTableAccept.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column=e.getColumn();
                ModificaDati(row,column);
            }
        });

        jPanelAcceptdx.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPaneAccept.setRightComponent(jPanelAcceptdx);

        add(jSplitPaneAccept, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        // TODO add your handling code here:
        String NName=jTextFieldName.getText();
        String NProt=jTextFieldProtocol.getText();
        RendiPersistenteAccept(NName,NProt);
        acceptListOld.add(new Accept(NName, NProt));
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
       //l'unico campo fondamentale per la chiamata con campi Ã¨ l'id gli altri possono essere null
        String name=jTextFieldName.getText();
        String prot=jTextFieldProtocol.getText();
        if (!(name.isEmpty() || prot.isEmpty())){
            RimuoviRigaAccept(name,prot);
        }
        int row=jTableAccept.getSelectedRow();
        if (row!=-1){
            RimuoviRigaAccept(row);
        }
        else{
                new ErrorForm("tupla non trovata");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        Object [] dirtyRow=ModifiedRow.toArray();
        ModifiedRow.clear();
        for (int i=0; i<dirtyRow.length; i++){
            int row=Integer.parseInt(dirtyRow[i].toString());
            Object []Temp=new Object[jTableAccept.getColumnCount()];
            for (int j=0;j<jTableAccept.getColumnCount();j++){
              Temp[j]=jTableAccept.getValueAt(row, j);
            }
            String user=Temp[0].toString();
            String prot=Temp[1].toString();
            try {
                Accept oldAccept=acceptListOld.get(row);
                String oldUser=oldAccept.getAcceptPK().getUsername();
                String oldProt=oldAccept.getAcceptPK().getProtocol();
                RendiPersistenteModifica(oldUser,oldProt,user,prot);
            }
            catch(NumberFormatException e){
                new ErrorForm(e.toString());
            }
        }
        acceptListOld.clear();
        CopiaListaAccept(acceptListOld, acceptList);
    }//GEN-LAST:event_jButtonSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager RoboAdminDBPUEntityManager;
    private java.util.List<GUI.Accept> acceptList;
    private javax.persistence.Query acceptQuery;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabelProtocol;
    private javax.swing.JLabel jLabelUserName;
    private javax.swing.JPanel jPanelAcceptdx;
    private javax.swing.JPanel jPanelAcceptsx;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPaneAccept;
    private javax.swing.JTable jTableAccept;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldProtocol;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //Vartiabili di supporto per la gestione
    private Vector ModifiedRow=new Vector();
    private java.util.List<GUI.Accept> acceptListOld;
    private MySQLDataBase db=null;


    //=========================================METODI PRIVATI DI INIZIALIZZAZIONE

    protected void inizializza(MySQLDataBase dataBase){
        acceptListOld=new ArrayList<Accept>();
        CopiaListaAccept(acceptListOld, acceptList);
        //prepara il db log su file per ora
        db=dataBase;
    }
    
    //=========================================METODI PRIVATI PER LA GESTIONE DELLA TABELLA

    /**
    * Tiene traccia delle celle interesate da una modifica
    *
    * @param row riga
    * @param column colonna
    * @return void
    */
    private void ModificaDati(int row ,int column){
        //Invocato a ogni modifica della tabella
        //se la colonna modificata Ã¨ -1 vuol dire che si sta aggiungendo togliendo una riga
        if (column!=-1){
            if (!ModifiedRow.contains(row))
            ModifiedRow.add(row);
        }
    }

     /**
    * Crea un lista con i dati della tabella di supporto al di andare a operare sulla giusta tubla anche se questa Ã¨ stata modificata
    *
    * @param List<Accept> vecchi
    * @param List<Accept> nuovi
    * @return void
    */
    private void CopiaListaAccept(List<Accept> acceptOld,List<Accept> acceptNew){
         for (int i=0;i<acceptNew.size();i++){
            acceptOld.add(new Accept(acceptNew.get(i).getAcceptPK().getUsername(),acceptNew.get(i).getAcceptPK().getProtocol()));
        }
    }

    /**
    * Rende un nuovo utente persistente nel DB
    *
    * @param user stringa contenente il nome del nuovo accept
    * @param prot stringa contenente il protocollo del nuovo accept
    * @return void
    */
    private void RendiPersistenteAccept(String user, String prot){
        //prepara la query da mandare al db
	String query ="INSERT INTO accept (Username, protocol) VALUES ('"+ user +"','"+ prot +"')";
        //esegue spedisce la query
        db.executeSqlUpdate(query);
        //AGGIUNGE LA RIGA DIRETTAMENTE ANCHE SULLA TABELLA
        Accept newAccept=new Accept(user,prot);
        acceptList.add(newAccept);
        jTableAccept.repaint();
    }


     /**
    * Rimuove una tupla selezionata in base all'id inserito nel campo id dalla tabella e dal DB
    *
    * @param user stringa contenente il nome dell'accept da rimuovere
    * @param prot stringa contenente il protocollo dell'accept da rimuovere
    * @return void
    */
    private void RimuoviRigaAccept(String user,String prot) {
        //preparo la query di rimozione
	String query = "DELETE FROM accept WHERE Username= '" + user +"' AND protocol= '" + prot +"'";
	//eseguo la query
        db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        Accept Rusers=new Accept(user,prot);
        acceptList.remove(Rusers);
        jTableAccept.repaint();
    }
    /**
    * Rimuove una tupla selezionata nella tabella dal DB
    * @return void
    */
    private void RimuoviRigaAccept(int row){
        Object user=jTableAccept.getValueAt(row, 1);
        Object prot= jTableAccept.getValueAt(row, 1);
	//preparo la query
        String query = "DELETE FROM accept WHERE Username= '" + user +"' AND protocol= '" + prot +"'";
	//eseguo la query
	db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        acceptList.remove(row);
        jTableAccept.repaint();
    }


     /**
    * Rende le modifiche apportate alle tuple sulla tabella persistenti sul DB, la ricerca della tupla da modificare Ã¨ svolta sull'id utente in particolare in base
    * all'oldId
    * @param oldUser stringa contenente il nome dell'accept prima della modifica
    * @param oldProt stringa contenente il protocollo delll'accept prima della modifica
    * @param user stringa contenente il nome modificato dell'accept
    * @param prot stringa contenente il protocollo modificato dell'accept
    * @return void
    */
    private void RendiPersistenteModifica(String oldUser, String oldProt, String user, String prot) {
        String query = "UPDATE accept SET Username= '" +user+"', protocol= '"+ prot +"' WHERE Username='"+ oldUser +"' AND protocol='"+ oldProt +"'";
        //eseguo la query
        db.executeSqlUpdate(query);

    }


}
