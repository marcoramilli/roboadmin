/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InvalidStringPannel.java
 *
 * Created on 30-dic-2009, 17.58.05
 */

package GUI;
import db.mySQL.MySQLDataBase;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
/**
 *
 * @author Luca
 * Classe per la gestione delle stringhe considerate invalide
 */
public class InvalidStringPannel extends javax.swing.JPanel {

    /** Creates new form InvalidStringPannel */
    public InvalidStringPannel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        RoboAdminDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("RoboAdminDBPU").createEntityManager();
        invalidstringQuery = java.beans.Beans.isDesignTime() ? null : RoboAdminDBPUEntityManager.createQuery("SELECT i FROM Invalidstring i");
        invalidstringList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(invalidstringQuery.getResultList());
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelsx = new javax.swing.JPanel();
        jLabelInvalidString = new javax.swing.JLabel();
        jTextFieldInvalidString = new javax.swing.JTextField();
        jButtonNew = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();
        jPaneldx = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInvalidString = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(250);

        jLabelInvalidString.setText("Invalid String:");

        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelsxLayout = new javax.swing.GroupLayout(jPanelsx);
        jPanelsx.setLayout(jPanelsxLayout);
        jPanelsxLayout.setHorizontalGroup(
            jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelsxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelsxLayout.createSequentialGroup()
                        .addComponent(jLabelInvalidString)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldInvalidString, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelsxLayout.createSequentialGroup()
                        .addComponent(jButtonSubmit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jButtonDelete)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNew)
                        .addGap(20, 20, 20))))
        );
        jPanelsxLayout.setVerticalGroup(
            jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelsxLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInvalidString)
                    .addComponent(jTextFieldInvalidString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 339, Short.MAX_VALUE)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmit)
                    .addComponent(jButtonNew)
                    .addComponent(jButtonDelete))
                .addGap(21, 21, 21))
        );

        jSplitPane1.setLeftComponent(jPanelsx);

        jPaneldx.setLayout(new java.awt.BorderLayout());

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, invalidstringList, jTableInvalidString);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${invalidString}"));
        columnBinding.setColumnName("Invalid String");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableInvalidString.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column=e.getColumn();
                ModificaDati(row,column);
            }
        });
        jScrollPane1.setViewportView(jTableInvalidString);

        jPaneldx.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPaneldx);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        // TODO add your handling code here:
        String NInvalidString=jTextFieldInvalidString.getText();
        RendiPersistenteInvalidString(NInvalidString);
        InvalidstringListOld.add(new Invalidstring(NInvalidString));
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        String invString=jTextFieldInvalidString.getText();
        if (!invString.isEmpty()){
            RimuoviRigaInvalidString(invString);
        }
        else{
            int row=jTableInvalidString.getSelectedRow();
            if (row!=-1){
                RimuoviRigaInvalidString(row);
            }
            else{
                new ErrorForm("tupla non trovata");
            }
        }

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
       Object [] dirtyRow=ModifiedRow.toArray();
        ModifiedRow.clear();
        for (int i=0; i<dirtyRow.length; i++){
            int row=Integer.parseInt(dirtyRow[i].toString());
            Object []Temp=new Object[jTableInvalidString.getColumnCount()];
            for (int j=0;j<jTableInvalidString.getColumnCount();j++){
              Temp[j]=jTableInvalidString.getValueAt(row, j);
            }
            String invString=Temp[0].toString();
            try {
                Invalidstring oldinvStringRow=InvalidstringListOld.get(row);
                String oldinvString=oldinvStringRow.getInvalidString();
                RendiPersistenteModifica(oldinvString,invString);
            }
            catch(NumberFormatException e){
                new ErrorForm(e.toString());
            }
        }
        InvalidstringListOld.clear();
        CopiaListaInvalidString(InvalidstringListOld, invalidstringList);        
    }//GEN-LAST:event_jButtonSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager RoboAdminDBPUEntityManager;
    private java.util.List<GUI.Invalidstring> invalidstringList;
    private javax.persistence.Query invalidstringQuery;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabelInvalidString;
    private javax.swing.JPanel jPaneldx;
    private javax.swing.JPanel jPanelsx;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTableInvalidString;
    private javax.swing.JTextField jTextFieldInvalidString;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //Vartiabili di supporto per la gestione
    private Vector ModifiedRow=new Vector();
    private java.util.List<GUI.Invalidstring> InvalidstringListOld;
    private MySQLDataBase db=null;



    //=========================================METODI PRIVATI DI INIZIALIZZAZIONE

    protected void inizializza(MySQLDataBase dataBase){
        InvalidstringListOld=new ArrayList<Invalidstring>();
        CopiaListaInvalidString(InvalidstringListOld, invalidstringList);
        //prepara il db log su file per ora
        db=dataBase;
    }

    //=========================================METODI PRIVATI PER LA GESTIONE DELLA TABELLA

    /**
    * Tiene traccia delle celle interesate da una modifica
    *
    * @param row riga
    * @param column colonna
    * @return void
    */
    private void ModificaDati(int row ,int column){
        //Invocato a ogni modifica della tabella
        //se la colonna modificata è -1 vuol dire che si sta aggiungendo togliendo una riga
        if (column!=-1){
            if (!ModifiedRow.contains(row))
            ModifiedRow.add(row);
        }
    }

    /**
    * Crea un lista con i dati della tabella di supporto al di andare a operare sulla giusta tubla anche se questa è stata modificata
    *
    * @param List<Invalidstring> vecchi
    * @param List<Invalidstring> nuovi
    * @return void
    */
    private void CopiaListaInvalidString(List<Invalidstring> InvalidstringOld,List<Invalidstring> InvalidstringNew){
         for (int i=0;i<InvalidstringNew.size();i++){
            InvalidstringOld.add(new Invalidstring(InvalidstringNew.get(i).getInvalidString()));
        }
    }


    /**
    * Rende un nuovo utente persistente nel DB
    * @param invString stringa contenente la nuova stringa invalda
    * @return void
    */
    private void RendiPersistenteInvalidString(String invString){
        //prepara la query da mandare al db
	String query ="INSERT INTO invalidstring (invalidString) VALUES ('" + invString + "')";
        //esegue spedisce la query
        db.executeSqlUpdate(query);
        //AGGIUNGE LA RIGA DIRETTAMENTE ANCHE SULLA TABELLA
        Invalidstring newInvString=new Invalidstring(invString);
        invalidstringList.add(newInvString);
        jTableInvalidString.repaint();
    }


     /**
    * Rimuove una tupla selezionata in base all'id inserito nel campo id dalla tabella e dal DB
    *
    * @param id intero con l'id dell'utente da rimuovere
    * @param user stringa contenente il nome dell'utente da rimuovere
    * @param pas stringa contenente la password dell'utente da rimuovere
    * @return void
    */
    private void RimuoviRigaInvalidString(String invString) {
        //preparo la query di rimozione
	String query = "DELETE FROM invalidstring WHERE invalidString= '" + invString +"' ";
	//eseguo la query
        db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        Invalidstring RInvString=new Invalidstring(invString);
        invalidstringList.remove(RInvString);
        jTableInvalidString.repaint();
    }
    /**
    * Rimuove una tupla selezionata nella tabella dal DB
    * @return void
    */
    private void RimuoviRigaInvalidString(int row){
        Object invString= jTableInvalidString.getValueAt(row, 0);
	//preparo la query
        String query = "DELETE FROM invalidstring WHERE invalidString= '" + invString +"' ";
	//eseguo la query
	db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        invalidstringList.remove(row);
        jTableInvalidString.repaint();
    }


     /**
    * Rende le modifiche apportate alle tuple sulla tabella persistenti sul DB, la ricerca della tupla da modificare è svolta sull'id utente in particolare in base
    * all'oldId
    * @param oldId intero con l'id dell'utente da modificare preso prima di un eventuale modifica
    * @param id intero con l'id dell'utente, eventualmente modificato
    * @param user stringa contenente il nome dell'utente eventualmente modificato
    * @param pas stringa contenente la password dell'utente eventualmente modificata
    * @return void
    */
    private void RendiPersistenteModifica(String oldInvString, String invString) {
        String query = "UPDATE invalidstring SET InvalidString= '" + invString +"' WHERE InvalidString='"+ oldInvString +"' ";
        //eseguo la query
        db.executeSqlUpdate(query);

    }

}
