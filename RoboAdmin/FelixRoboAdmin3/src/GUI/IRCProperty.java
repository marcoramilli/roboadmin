/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IRCProperty.java
 *
 * Created on 30-gen-2010, 15.30.10
 */
/**
 *
 * @author Luca
 * Form per la gestione delle propiet√† di IRC
 */
package GUI;


import configurator.patchConfigurator.Configurator;
import db.mySQL.MySQLDataBase;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import log.fileLogger.FileLogger;
public class IRCProperty extends javax.swing.JFrame {

    /** Creates new form IRCProperty */
    public IRCProperty() {
        initComponents();
        inizializza();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        RoboAdminDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("RoboAdminDBPU").createEntityManager();
        ircpropertiesQuery = java.beans.Beans.isDesignTime() ? null : RoboAdminDBPUEntityManager.createQuery("SELECT i FROM Ircproperties i");
        ircpropertiesList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(ircpropertiesQuery.getResultList());
        ircchannellistQuery = java.beans.Beans.isDesignTime() ? null : RoboAdminDBPUEntityManager.createQuery("SELECT i FROM Ircchannellist i");
        ircchannellistList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(ircchannellistQuery.getResultList());
        jSplitPaneIRCProperties = new javax.swing.JSplitPane();
        jPanelsx = new javax.swing.JPanel();
        jLabelValue = new javax.swing.JLabel();
        jLabelProperty = new javax.swing.JLabel();
        jTextFieldProperty = new javax.swing.JTextField();
        jTextFieldValue = new javax.swing.JTextField();
        jButtonSubmit = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jTextFieldChannel = new javax.swing.JTextField();
        jLabelChannel = new javax.swing.JLabel();
        jPaneldx = new javax.swing.JPanel();
        jSplitPanedx = new javax.swing.JSplitPane();
        jScrollPaneTop = new javax.swing.JScrollPane();
        jTableIRCProperties = new javax.swing.JTable();
        jScrollPaneBottom = new javax.swing.JScrollPane();
        jTableIRCChannelList = new javax.swing.JTable();

        setTitle("IRCProperties");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jSplitPaneIRCProperties.setDividerLocation(260);

        jLabelValue.setText("Property:");

        jLabelProperty.setText("Value:");

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jLabelChannel.setText("Channel:");

        javax.swing.GroupLayout jPanelsxLayout = new javax.swing.GroupLayout(jPanelsx);
        jPanelsx.setLayout(jPanelsxLayout);
        jPanelsxLayout.setHorizontalGroup(
            jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelsxLayout.createSequentialGroup()
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelsxLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelsxLayout.createSequentialGroup()
                                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelValue)
                                    .addComponent(jLabelProperty))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldValue, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(jTextFieldProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelsxLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelsxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonSubmit)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelete)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNew)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanelsxLayout.setVerticalGroup(
            jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelsxLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelValue)
                    .addComponent(jTextFieldProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProperty)
                    .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addGroup(jPanelsxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmit)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonNew))
                .addGap(22, 22, 22))
        );

        jSplitPaneIRCProperties.setLeftComponent(jPanelsx);

        jPaneldx.setLayout(new java.awt.BorderLayout());

        jSplitPanedx.setDividerLocation(200);
        jSplitPanedx.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ircpropertiesList, jTableIRCProperties);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ircpropertiesPK.property}"));
        columnBinding.setColumnName("Property");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ircpropertiesPK.value}"));
        columnBinding.setColumnName("Value");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPaneTop.setViewportView(jTableIRCProperties);
        jTableIRCProperties.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column=e.getColumn();
                ModificaDatiProp(row,column);
            }
        });

        jSplitPanedx.setTopComponent(jScrollPaneTop);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ircchannellistList, jTableIRCChannelList);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${channel}"));
        columnBinding.setColumnName("Channel");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        jTableIRCChannelList.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column=e.getColumn();
                ModificaDatiChannel(row,column);
            }
        });
        jScrollPaneBottom.setViewportView(jTableIRCChannelList);

        jSplitPanedx.setRightComponent(jScrollPaneBottom);

        jPaneldx.add(jSplitPanedx, java.awt.BorderLayout.CENTER);

        jSplitPaneIRCProperties.setRightComponent(jPaneldx);

        getContentPane().add(jSplitPaneIRCProperties, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        Object [] dirtyRowProp=ModifiedRowProp.toArray();
        Object [] dirtyRowChannel=ModifiedRowChannel.toArray();
        ModifiedRowProp.clear();
        ModifiedRowChannel.clear();
        for (int i=0; i<dirtyRowProp.length; i++){
            int row=Integer.parseInt(dirtyRowProp[i].toString());
            Object []Temp=new Object[jTableIRCProperties.getColumnCount()];
            for (int j=0;j<jTableIRCProperties.getColumnCount();j++){
                Temp[j]=jTableIRCProperties.getValueAt(row, j);
            }
            String property=Temp[0].toString();
            String value=Temp[1].toString();
            try {
                Ircproperties oldIRCProperties=IRCPropertiesListOld.get(row);
                String oldProperty=oldIRCProperties.getIrcpropertiesPK().getProperty();
                String oldValue=oldIRCProperties.getIrcpropertiesPK().getValue();
                RendiPersistenteModificaPropiet√†(oldProperty,oldValue,property,value);
            } catch(NumberFormatException e){
                new ErrorForm(e.toString()).setVisible(true);
            }
        }
        for (int i=0; i<dirtyRowChannel.length;i++){
           int row=Integer.parseInt(dirtyRowChannel[i].toString());
            Object []Temp=new Object[jTableIRCChannelList.getColumnCount()];
            for (int j=0;j<jTableIRCChannelList.getColumnCount();j++){
              Temp[j]=jTableIRCChannelList.getValueAt(row, j);
            }
            String channel=Temp[0].toString();
            try {
                Ircchannellist oldIRCChannelRow=IRCChannelListOld.get(row);
                String oldChannel=oldIRCChannelRow.getChannel();
                RendiPersistenteModificaChannel(oldChannel,channel);
            }
            catch(NumberFormatException e){
                new ErrorForm(e.toString()).setVisible(true);
            }
        }
        IRCPropertiesListOld.clear();
        CopiaListaIRCProperties(IRCPropertiesListOld, ircpropertiesList);
        IRCChannelListOld.clear();
        CopiaListaIRCChannel(IRCChannelListOld, ircchannellistList);
}//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        String property=jTextFieldProperty.getText();
        String value=jTextFieldValue.getText();
        String channel=jTextFieldChannel.getText();
        if (!(property.isEmpty() || value.isEmpty())){
            RimuoviRigaIRCProperties(property,value);
        }
        int rowProp=jTableIRCProperties.getSelectedRow();
        if (rowProp!=-1){
            RimuoviRigaIRCProperties(rowProp);
        }    
        if (!channel.isEmpty()){
            RimuoviRigaIRCChannel(channel);
        }
        int rowChannel=jTableIRCChannelList.getSelectedRow();
        if (rowChannel!=-1){
            RimuoviRigaIRCChannel(rowChannel);
        }
//        (channel.isEmpity)&&(rowChanne==-1)&&(rowProp==-1)&&(property.isEmpty() || value.isEmpty())
        if ((channel.isEmpty())&&(rowChannel==-1)&&(rowProp==-1)&&(property.isEmpty() || value.isEmpty())){
             new ErrorForm("tupla non riconosciuta").setVisible(true);
        }
}//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        // TODO add your handling code here:
        //SI √® INIBITA LA PARTE CHE PERMETTE L'AGGIUNA DI UNA PROPERTY INQUANTO ANCHE SE FOSSE PERMESSO NON SAREBBE POI POSSIBILE A RA GESTIRLA
//        String NProperty=jTextFieldProperty.getText();
//        String NValue=jTextFieldValue.getText();
        String NChannel=jTextFieldChannel.getText();
        //rende persistente la prop
//        if (!NProperty.isEmpty()){
//            RendiPersistentePropriet√†(NProperty,NValue);
//            IRCPropertiesListOld.add(new Ircproperties(NProperty, NValue));
//        }
        //rende persisente il canale
        if (!NChannel.isEmpty()){
            RendiPersistenteIRCChannel(NChannel);
            IRCChannelListOld.add(new Ircchannellist(NChannel));
        }
}//GEN-LAST:event_jButtonNewActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IRCProperty().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager RoboAdminDBPUEntityManager;
    private java.util.List<GUI.Ircchannellist> ircchannellistList;
    private javax.persistence.Query ircchannellistQuery;
    private java.util.List<GUI.Ircproperties> ircpropertiesList;
    private javax.persistence.Query ircpropertiesQuery;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabelChannel;
    private javax.swing.JLabel jLabelProperty;
    private javax.swing.JLabel jLabelValue;
    private javax.swing.JPanel jPaneldx;
    private javax.swing.JPanel jPanelsx;
    private javax.swing.JScrollPane jScrollPaneBottom;
    private javax.swing.JScrollPane jScrollPaneTop;
    private javax.swing.JSplitPane jSplitPaneIRCProperties;
    private javax.swing.JSplitPane jSplitPanedx;
    private javax.swing.JTable jTableIRCChannelList;
    private javax.swing.JTable jTableIRCProperties;
    private javax.swing.JTextField jTextFieldChannel;
    private javax.swing.JTextField jTextFieldProperty;
    private javax.swing.JTextField jTextFieldValue;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //Vartiabili di supporto per la gestione
    private Vector ModifiedRowProp=new Vector();
    private java.util.List<GUI.Ircproperties> IRCPropertiesListOld;
    private Vector ModifiedRowChannel=new Vector();
    private java.util.List<GUI.Ircchannellist> IRCChannelListOld;
    private Configurator conf=new Configurator();
    private MySQLDataBase db=null;
    private FileLogger log=new FileLogger();



    //=========================================METODI PRIVATI DI INIZIALIZZAZIONE

    protected void inizializza(){
        IRCPropertiesListOld=new ArrayList<Ircproperties>();
        CopiaListaIRCProperties(IRCPropertiesListOld, ircpropertiesList);
        IRCChannelListOld=new ArrayList<Ircchannellist>();
        CopiaListaIRCChannel(IRCChannelListOld, ircchannellistList);
        //prepara il db log sempre su file al momento
        db=new MySQLDataBase(conf, log);
    }

    //=========================================METODI PRIVATI PER LA GESTIONE DELLA TABELLA DELLE PROPRIETA'

    /**
    * Tiene traccia delle celle interesate da una modifica
    *
    * @param row riga
    * @param column colonna
    * @return void
    */
    private void ModificaDatiProp(int row ,int column){
        //Invocato a ogni modifica della tabella
        //se la colonna modificata √® -1 vuol dire che si sta aggiungendo togliendo una riga
        if (column!=-1){
            if (!ModifiedRowProp.contains(row))
            ModifiedRowProp.add(row);
        }
    }

     /**
    * Crea un lista con i dati della tabella delle propriet√† di supporto al di andare a operare sulla giusta tubla anche se questa √® stata modificata
    *
    * @param List<Ircproperties> vecchi
    * @param List<Ircproperties> nuovi
    * @return void
    */
    private void CopiaListaIRCProperties(List<Ircproperties> IRCPropertiesOld,List<Ircproperties> IRCPropertiesNew){
         for (int i=0;i<IRCPropertiesNew.size();i++){
            IRCPropertiesOld.add(new Ircproperties(IRCPropertiesNew.get(i).getIrcpropertiesPK().getValue(),IRCPropertiesNew.get(i).getIrcpropertiesPK().getProperty()));
        }
    }

    /**
    * Rende una nuova property persistente nel DB
    *
    * @param property la nuova propiet√†
    * @param value il valore della nuova propriet√†
    * @return void
    */
    private void RendiPersistentePropriet√†(String property, String value){
        //prepara la query da mandare al db
	String query ="INSERT INTO ircproperties (Property, Value) VALUES ('" + property + "', '"+ value +"')";
        //esegue spedisce la query
        db.executeSqlUpdate(query);
        //AGGIUNGE LA RIGA DIRETTAMENTE ANCHE SULLA TABELLA
        Ircproperties newIRCProp = new Ircproperties(property, value);
        ircpropertiesList.add(newIRCProp);
        jTableIRCProperties.repaint();
    }



     /**
    * Rimuove una tupla selezionata in base all'id inserito nel campo id dalla tabella e dal DB
    * @param property stringa contenente il nome della propriet√† da rimuovere
    * @param value stringa contenente il valore associato alla propriet√† da rimuovere
    * @return void
    */
    private void RimuoviRigaIRCProperties(String property,String value) {
        //preparo la query di rimozione
	String query = "DELETE FROM ircproperties WHERE Property= '" + property +"' AND Value= '" + value +"' ";
	//eseguo la query
        db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        Ircproperties RProperty=new Ircproperties(property,value);
        ircpropertiesList.remove(RProperty);
        jTableIRCProperties.repaint();
    }
    /**
    * Rimuove una tupla selezionata nella tabella dal DB
    * @return void
    */
    private void RimuoviRigaIRCProperties(int row){
        String property= (String) jTableIRCProperties.getValueAt(row,0);
        String value=(String) jTableIRCProperties.getValueAt(row, 1);
	//preparo la query
        String query = "DELETE FROM ircproperties WHERE Property= '" + property +"' AND Value= '" + value +"' ";
	//eseguo la query
	db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        ircpropertiesList.remove(row);
        jTableIRCProperties.repaint();
    }


     /**
    * Rende le modifiche apportate alle tuple sulla tabella persistenti sul DB, la ricerca della tupla da modificare √® scolta in base a oldProperty e
    * oldValue
    * @param oldProperty stringa contenente il valore precedente alla modifica della propiet√†
    * @param oldValue stringa contenente il valore precedente alla modifica del value
    * @param property stringa contenente il valore aggiornato della propiet√†
    * @param value stringa contente il valore aggiornato del value
    * @return void
    */
    private void RendiPersistenteModificaPropiet√†(String oldProperty, String oldValue, String property, String value) {
        String query = "UPDATE ircproperties SET Property= '" +property+"', Value= '"+ value +"' WHERE Property='"+ oldProperty +"' AND Value='"+ oldValue +"' ";
        //eseguo la query
        db.executeSqlUpdate(query);

    }



  //=========================================METODI PRIVATI PER LA GESTIONE DELLA TABELLA CHANNEL

    /**
    * Tiene traccia delle celle interesate da una modifica
    *
    * @param row riga
    * @param column colonna
    * @return void
    */
    private void ModificaDatiChannel(int row ,int column){
        //Invocato a ogni modifica della tabella
        //se la colonna modificata √® -1 vuol dire che si sta aggiungendo togliendo una riga
        if (column!=-1){
            if (!ModifiedRowChannel.contains(row))
            ModifiedRowChannel.add(row);
        }
    }

     /**
    * Crea un lista con i dati della tabella dei canali di supporto al di andare a operare sulla giusta tubla anche se questa √® stata modificata
    *
    * @param List<Ircchannellist> vecchi
    * @param List<Ircchannellist> nuovi
    * @return void
    */
    private void CopiaListaIRCChannel(List<Ircchannellist> IRCChannelOld,List<Ircchannellist> IRCChannelNew){
         for (int i=0;i<IRCChannelNew.size();i++){
            IRCChannelOld.add(new Ircchannellist(IRCChannelNew.get(i).getChannel()));
        }
    }


    /**
    * Rende un nuovo utente persistente nel DB
    * @param channel stringa contenente il nome del nuovo canale IRC
    * @return void
    */
    private void RendiPersistenteIRCChannel(String channel){
        //prepara la query da mandare al db
	String query ="INSERT INTO ircchannellist (Channel) VALUES ('" + channel + "')";
        //esegue spedisce la query
        db.executeSqlUpdate(query);
        //AGGIUNGE LA RIGA DIRETTAMENTE ANCHE SULLA TABELLA
        Ircchannellist newIRCChannel=new Ircchannellist(channel);
        ircchannellistList.add(newIRCChannel);
        jTableIRCChannelList.repaint();
    }


     /**
    * Rimuove una tupla selezionata in base all'id inserito nel campo id dalla tabella e dal DB
    * @param Channel stringa con il canale di IRC da rimuovere
    * @return void
    */
    private void RimuoviRigaIRCChannel(String channel) {
        //preparo la query di rimozione
	String query = "DELETE FROM ircchannellist WHERE Channel= '" + channel +"' ";
	//eseguo la query
        db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        Ircchannellist RIRCChannel=new Ircchannellist(channel);
        ircchannellistList.remove(RIRCChannel);
        jTableIRCChannelList.repaint();
    }
    /**
    * Rimuove una tupla selezionata nella tabella dal DB
    * @return void
    */
    private void RimuoviRigaIRCChannel(int row){
        Object channel= jTableIRCChannelList.getValueAt(row, 0);
	//preparo la query
        String query = "DELETE FROM ircchannellist WHERE Channel= '" + channel +"' ";
	//eseguo la query
	db.executeSqlUpdate(query);
        //RIMUOVE LA RIGA DALLA TABELLA
        ircchannellistList.remove(row);
        jTableIRCChannelList.repaint();
    }


     /**
    * Rende le modifiche apportate alle tuple sulla tabella persistenti sul DB, la ricerca della tupla da modificare √® svolta sull'id utente in particolare in base
    * all'oldId
    * @param oldChannel intero con l'id dell'utente da modificare preso prima di un eventuale modifica
    * @param Channel intero con l'id dell'utente, eventualmente modificato
    * @return void
    */
    private void RendiPersistenteModificaChannel(String oldChannel, String channel) {
        String query = "UPDATE ircchannellist SET Channel= '" + channel +"' WHERE Channel='"+ oldChannel +"' ";
        //eseguo la query
        db.executeSqlUpdate(query);

    }

}
